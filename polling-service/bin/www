#!/usr/bin/env node

/**
 * Module dependencies.
 */

var debug = require('debug')('polling-service:server')
var http = require('http')
var cron = require('node-cron');

var {closePool, getPool, diFactory} = require('../infra')
var {dbFactory} = require('../infra/useDb')
var appFactory = require('../app')
var pollerFactory = require('../poller')
const configFactory = require('../infra/config')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')

async function start() {
  const pool = await getPool()

  async function onClose() {
    await closePool(pool)
  }

  async function onError(error) {
    await onClose()

    if (error.syscall !== 'listen') {
      throw error
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges')
        process.exit(1)
        break
      case 'EADDRINUSE':
        console.error(bind + ' is already in use')
        process.exit(1)
        break
      default:
        throw error
    }
  }

  function onListening() {
    var addr = server.address()
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port
    debug('Listening on ' + bind)
  }

  const db = await dbFactory(pool)
  const config = configFactory()
  const di = diFactory(db, config)
  const app = appFactory(di, config)
  app.set('port', port)

  var server = http.createServer(app)

  server.listen(port)
  server.on('close', onClose)
  server.on('error', onError)
  server.on('listening', onListening)

  const poller = pollerFactory(db, config)
  cron.schedule(config.pollerCron, poller)
}

start()

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

